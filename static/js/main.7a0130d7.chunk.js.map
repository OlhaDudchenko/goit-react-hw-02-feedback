{"version":3,"sources":["components/utils/theme.js","components/FeedbackOptions/Feedbackoptions.styled.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.styled.js","components/Statistics/Statistics.js","components/Section/Section.styled.js","components/Section/Section.js","components/Notification/Notification.js","components/App/App.styled.js","components/App/App.js","index.js"],"names":["theme","Object","freeze","colors","white","ButtonColor","TextColor","animation","time","Button","styled","button","props","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","StatisticsWrapper","div","StatisticsItem","span","Statistics","good","neutral","bad","total","positivePercentage","Title","h2","Section","title","children","Notification","message","AppWrapper","App","state","handleFeedbackGiven","value","target","textContent","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","ButtonInner","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a0130d7.chunk.js","sourcesContent":["export const theme = Object.freeze({\r\n  colors: {\r\n    white: '#ffffff',\r\n    ButtonColor:'rgba(216, 191, 216, 0.1)',\r\n    TextColor:'#D8BFD8',\r\n    animation: '250ms',\r\n    time: 'cubic-bezier(0.4, 0, 0.2, 1)',\r\n  },\r\n});","import styled from '@emotion/styled';\r\n\r\nexport const Button = styled.button`\r\nwidth:80px;\r\nheight:40px;\r\nbackground-color:${props => props.theme.colors.ButtonColor};\r\nborder-radius:4px;\r\nborder-color:${props => props.theme.colors.TextColor};\r\ncolor:${props => props.theme.colors.TextColor};\r\nfont-family: \"Lobster\", cursive;\r\nletter-spacing: 0.5px;\r\nline-height:1.5px;\r\ncursor:pointer;\r\ntransition:${props => `transform${props.theme.colors.animation} ${props.theme.colors.time}`},\r\n${props => `box-shadow${props.theme.colors.animation} ${props.theme.colors.time}`};\r\n\r\n&:hover,&:focus{\r\n    \r\n    box-shadow:${props => `0 0 10px${props.theme.colors.white}`};\r\n    transform:scale(1.1);\r\n}\r\n&:not(:last-child){\r\n    margin-right:10px;\r\n}\r\n`","import PropTypes from 'prop-types';\r\nimport { Button } from \"./Feedbackoptions.styled\";\r\n\r\nimport React from \"react\";\r\nexport function FeedbackOptions({options,onLeaveFeedback}){\r\n    return (\r\n        <div>\r\n        {options.map((option) => (\r\n             <Button key={option} onClick={onLeaveFeedback}>{option}</Button>\r\n            \r\n        ))}\r\n    </div>\r\n    );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n onLeaveFeedback:PropTypes.func.isRequired,\r\n};","import styled from '@emotion/styled';\r\n\r\nexport const StatisticsWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction:column;\r\n`;\r\nexport const StatisticsItem = styled.span`\r\n  &:not(:last-child){\r\n      margin-bottom:6px;\r\n  }\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { StatisticsWrapper, StatisticsItem } from \"./Statistics.styled\";\r\n\r\nexport function Statistics({good,neutral,bad,total,positivePercentage}) {\r\n    return (\r\n        <StatisticsWrapper>\r\n                <StatisticsItem>Good: {good}</StatisticsItem>\r\n                <StatisticsItem>Neutral: {neutral}</StatisticsItem>\r\n                <StatisticsItem>Bad: {bad}</StatisticsItem>\r\n                <StatisticsItem>Total: {total}</StatisticsItem>\r\n                <StatisticsItem>Positive feedback: {positivePercentage}%</StatisticsItem>\r\n        </StatisticsWrapper>\r\n       \r\n    );\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage:PropTypes.number.isRequired,\r\n};","import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.h2`\r\n\r\n    border-bottom:${props => `1px solid${props.theme.colors.white} `};\r\n    border-bottom-style: dotted;\r\n    display: inline-block;\r\n`","  \r\nimport PropTypes from 'prop-types';\r\nimport { Title } from './Section.styled';\r\n\r\nexport function Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      {title && <Title>{title}</Title>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport function Notification({ message }) {\r\n    return (\r\n        <p>{message}</p>\r\n    );\r\n}\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};","import styled from '@emotion/styled';\r\n\r\nexport const AppWrapper = styled.div`\r\n  margin-left:50px;\r\n  margin-top:50px;\r\n  color:${props => props.theme.colors.TextColor};\r\n`;","import React, { Component} from 'react';\nimport { FeedbackOptions } from \"../FeedbackOptions/FeedbackOptions\"\nimport { Statistics } from \"../Statistics/Statistics\"\nimport { Section } from \"../Section/Section\"\nimport{Notification} from \"../Notification/Notification\"\nimport {AppWrapper} from \"./App.styled\"\nexport class App extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    }\n\n    handleFeedbackGiven = ({ target}) => {\n        const value = target.textContent;\n        this.setState( prevState=> ({\n            [ value]: prevState[value] + 1 \n        }))\n\n    }\n  \n    countTotalFeedback = () => {\n         \n        const { good, neutral, bad } = this.state;\n    \n        return good+neutral+bad;\n    }\n    \n    countPositiveFeedbackPercentage = ( total) => {\n         const { good } = this.state;\n        return Math.round(100 * good / total);\n\n    }\n    \n    render() {\n\n        const total = this.countTotalFeedback();\n        const ButtonInner = Object.keys(this.state)\n       \n        return (\n            <AppWrapper>\n               \n             <Section title=\"Please live feedback\">\n                <FeedbackOptions options={ButtonInner} onLeaveFeedback={this.handleFeedbackGiven}></FeedbackOptions>\n                </Section>\n                {total===0 &&(<Notification message=\"No feedback given\"></Notification>) }\n                {total>0&&(<Section title=\"Statistics\">\n                <Statistics\n             good={this.state.good}\n                    neutral={this.state.neutral}\n                    bad={this.state.bad}\n                    total={total}\n              positivePercentage={this.countPositiveFeedbackPercentage(total)}\n            />\n               </Section>)}\n               \n            </AppWrapper>\n\n\n        );\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@emotion/react';\nimport { theme } from \"./components/utils/theme\";\nimport './index.css';\nimport { App } from './components/App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n     <ThemeProvider theme={theme}>\n    <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}